# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  bk-service-connection: 'pipeline-example-connection'
  bk-rg: 'MyRG'
  bk-storage: 'mystg000'
  bk-container: 'mycontainer000'
  bk-key: 'terraform.tfstate'

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps: 
          - script: |
              ls $(System.DefaultWorkingDirectory)
             
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'
          
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm:  '$(bk-service-connection)'
              backendAzureRmResourceGroupName: '$(bk-rg)'
              backendAzureRmStorageAccountName: '$(bk-storage)'
              backendAzureRmContainerName: '$(bk-container)'
              backendAzureRmKey: '$(bk-key)'   
              workingDirectory: '$(System.DefaultWorkingDirectory)/Pipeline-Examples/01-Example/Terraform-Template'    

          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Pipeline-Examples/01-Example/Terraform-Template'

  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'
          
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm:  '$(bk-service-connection)'
              backendAzureRmResourceGroupName: '$(bk-rg)'
              backendAzureRmStorageAccountName: '$(bk-storage)'
              backendAzureRmContainerName: '$(bk-container)'
              backendAzureRmKey: '$(bk-key)' 
              workingDirectory: '$(System.DefaultWorkingDirectory)/Pipeline-Examples/01-Example/Terraform-Template'

          - task: TerraformTaskV4@4
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: '$(bk-service-connection)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Pipeline-Examples/01-Example/Terraform-Template'

          - task: TerraformTaskV4@4
            displayName: deploy
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: '$(bk-service-connection)'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Pipeline-Examples/01-Example/Terraform-Template'